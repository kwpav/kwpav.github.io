<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Kevins Notes - pelican</title><link href="https://kwpav.github.io/" rel="alternate"></link><link href="https://kwpav.github.io/feeds/pelican.atom.xml" rel="self"></link><id>https://kwpav.github.io/</id><updated>2018-09-23T00:00:00-05:00</updated><entry><title>Pelican and Org Mode</title><link href="https://kwpav.github.io/pelican_org_mode.html" rel="alternate"></link><published>2018-09-23T00:00:00-05:00</published><updated>2018-09-23T00:00:00-05:00</updated><author><name>Kevin Pavao</name></author><id>tag:kwpav.github.io,2018-09-23:/pelican_org_mode.html</id><summary type="html">Setting up Pelican to use org mode</summary><content type="html">&lt;p&gt;
One of the first things you need to do after deciding to start a blog, is setting one up. So I figured it would be appropriate that the first post of my blog is about how I set this up.
&lt;/p&gt;

&lt;p&gt;
My requirements are fairly simple:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;create a static site&lt;/li&gt;
&lt;li&gt;be able to write content using Emacs' &lt;code&gt;org-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;preferably written in a language I know&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This led me down a path of looking at and trying a few different static site generators. 
&lt;/p&gt;

&lt;p&gt;
Each static site generator essentially works the same. There is a CLI which allows you to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;scaffold out the site&lt;/li&gt;
&lt;li&gt;create content in a folder in some sort of text format, e.g. markdown, rest, org, etc&lt;/li&gt;
&lt;li&gt;generate HTML from the content&lt;/li&gt;
&lt;li&gt;run a local server to preview the website&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
After trying out a few different ones, I decided to use &lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt;. It seems to be the most popular and actively maintained one written in Python. It's even used by &lt;a href="https://kernel.org"&gt;kernel.org&lt;/a&gt;!
&lt;/p&gt;

&lt;div id="outline-container-orge29e3de" class="outline-2"&gt;
&lt;h2 id="orge29e3de"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Initial setup&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
First, install &lt;code&gt;pelican&lt;/code&gt; (I use &lt;code&gt;pipenv&lt;/code&gt; personally).
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;pipenv install pelican
pipenv shell
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Create the folder where you want the website and initialize the site:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;pelican-quickstart
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
This scaffolds out the files and directories needed.
&lt;/p&gt;

&lt;p&gt;
Create a new post in the &lt;code&gt;content&lt;/code&gt; folder.
&lt;/p&gt;

&lt;p&gt;
Generate the output:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;pelican content
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
This creates generates the output into the &lt;code&gt;output&lt;/code&gt; folder.
&lt;/p&gt;

&lt;p&gt;
Preview the content:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="font-weight: bold;"&gt;cd&lt;/span&gt; output
python -m pelican.server
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
If you select "yes" during &lt;code&gt;pelican-quickstart&lt;/code&gt;, a &lt;code&gt;Makefile&lt;/code&gt; is created. This allows you to use &lt;code&gt;make&lt;/code&gt; to automate some of the pelican tasks such as generating the output, publishing, running the server, etc.
&lt;/p&gt;

&lt;p&gt;
Generate and preview the content with &lt;code&gt;make&lt;/code&gt; instead of &lt;code&gt;pelican&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;make html
make serve
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It can also do some other cool stuff like generating the production version of the website, use GitHub's &lt;code&gt;gh-pages&lt;/code&gt; branch, etc. See how to use it from the &lt;a href="http://docs.getpelican.com/en/stable/publish.html?highlight=makefile#make"&gt;official docs&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb34b948" class="outline-2"&gt;
&lt;h2 id="orgb34b948"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Using org mode&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
In order to use &lt;code&gt;org-mode&lt;/code&gt;, you need to install a plugin.
&lt;/p&gt;

&lt;p&gt;
To install a plugin, clone the &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;pelican-plugins&lt;/a&gt; repo:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;git clone --recursive https://github.com/getpelican/pelican-plugins
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Add the path and the plugin to to your &lt;code&gt;pelicanconf.py&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;PLUGIN_PATHS&lt;/span&gt; = [&lt;span style="font-style: italic;"&gt;'path/to/pelican-plugins'&lt;/span&gt;]
&lt;span style="font-weight: bold; font-style: italic;"&gt;PLUGINS&lt;/span&gt; = [&lt;span style="font-style: italic;"&gt;'org_reader'&lt;/span&gt;]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
There are three different plugins to choose from:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;org_reader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org_python_reader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org_pandoc_reader&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Each plugin uses a different mechanism to convert the &lt;code&gt;.org&lt;/code&gt; files to HTML. &lt;code&gt;org_reader&lt;/code&gt; uses Emacs, &lt;code&gt;org_python_reader&lt;/code&gt; uses the &lt;a href="https://github.com/paetzke/orgco"&gt;orgco&lt;/a&gt; Python library, and &lt;code&gt;org_pandoc_reader&lt;/code&gt; uses (you guessed it&amp;#x2026;) &lt;a href="https://pandoc.org"&gt;Pandoc&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It seems that &lt;code&gt;org_python_reader&lt;/code&gt; is an 'update' for &lt;code&gt;org_reader&lt;/code&gt;. &lt;code&gt;org_pandoc_reader&lt;/code&gt; on the other hand looks to be based off of another plugin, &lt;code&gt;pandoc_reader&lt;/code&gt;. 
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdacf0b1" class="outline-3"&gt;
&lt;h3 id="orgdacf0b1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; Org Reader Setup&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Add the following to &lt;code&gt;pelicanconf.py&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;PLUGINS&lt;/span&gt; = [&lt;span style="font-style: italic;"&gt;'org_reader'&lt;/span&gt;]
&lt;span style="font-weight: bold; font-style: italic;"&gt;ORG_READER_EMACS_LOCATION&lt;/span&gt; = &lt;span style="font-style: italic;"&gt;'/usr/bin/emacs'&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
In order to define the metadata for Pelican, put the following in the &lt;code&gt;org&lt;/code&gt; file's header:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;#+TITLE: &lt;span style="font-weight: bold;"&gt;The Title Of This BlogPost&lt;/span&gt;
#+DATE: 2001-01-01
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+CATEGORY: blog-category&lt;/span&gt;
#+AUTHOR: My Name
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+PROPERTY: LANGUAGE en&lt;/span&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+PROPERTY: SUMMARY hello, this is the description&lt;/span&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+PROPERTY: SLUG test_slug&lt;/span&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+PROPERTY: MODIFIED [2015-12-29 Di]&lt;/span&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+PROPERTY: TAGS my, first, tags&lt;/span&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+PROPERTY: SAVE_AS alternative_filename.html&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb6bb382" class="outline-4"&gt;
&lt;h4 id="orgb6bb382"&gt;&lt;span class="section-number-4"&gt;2.1.1&lt;/span&gt; Org Python Reader Setup&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-1-1"&gt;
&lt;p&gt;
Add the following to &lt;code&gt;pelicanconf.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;PLUGINS&lt;/span&gt; = [&lt;span style="font-style: italic;"&gt;'org_python_reader'&lt;/span&gt;]
&lt;span style="font-weight: bold; font-style: italic;"&gt;ORGMODE&lt;/span&gt; = {
        &lt;span style="font-style: italic;"&gt;'code_highlight'&lt;/span&gt;: &lt;span style="font-weight: bold; text-decoration: underline;"&gt;True&lt;/span&gt;,
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It will not work unless you add &lt;code&gt;ORGMODE&lt;/code&gt;. The only option currently is &lt;code&gt;code_highlight&lt;/code&gt; which can be set to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. This tells the plugin whether to add syntax highlighting to &lt;code&gt;SRC&lt;/code&gt; blocks.
&lt;/p&gt;

&lt;p&gt;
This uses the same &lt;code&gt;org&lt;/code&gt; headers as &lt;code&gt;org_reader&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
One thing to note is that this plugin will always print out line numbers in &lt;code&gt;SRC&lt;/code&gt; blocks due to its dependency on &lt;a href="https://github.com/paetzke/orgco"&gt;orgco&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org72cc574" class="outline-4"&gt;
&lt;h4 id="org72cc574"&gt;&lt;span class="section-number-4"&gt;2.1.2&lt;/span&gt; Org Pandoc Reader setup&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-1-2"&gt;
&lt;p&gt;
In order to use &lt;a href="https://github.com/jo-tham/org_pandoc_reader/tree/bf06b72c1bfe1831f3e4c872f6c833af0bec19bf"&gt;org&lt;sub&gt;pandoc&lt;/sub&gt;&lt;sub&gt;reader&lt;/sub&gt;&lt;/a&gt;, you need to clone it as the &lt;code&gt;pelican-plugins&lt;/code&gt; repo only links to it, it doesn't include it directly:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;git clone https://github.com/jo-tham/org_pandoc_reader.git
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Add the following to &lt;code&gt;pelicanconf.py&lt;/code&gt;
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;PLUGINS&lt;/span&gt; = [&lt;span style="font-style: italic;"&gt;'org_pandoc_reader'&lt;/span&gt;]
&lt;span style="font-weight: bold; font-style: italic;"&gt;ORG_PANDOC_ARGS&lt;/span&gt; = [&lt;span style="font-style: italic;"&gt;'--standalone'&lt;/span&gt;,]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Without &lt;code&gt;--standalone&lt;/code&gt;, the SRC blocks don't have syntax highlighting. Source code blocks are also underlined for me in some themes for some reason. I might take a look at why that is happening later.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;org_pandoc_reader&lt;/code&gt; also does not use &lt;code&gt;PROPERTY&lt;/code&gt; to generate metadata, you just use the name of the setting directly, e.g.:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;#+TITLE: &lt;span style="font-weight: bold;"&gt;The Title Of This BlogPost&lt;/span&gt;
#+DATE: 2001-01-01
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+CATEGORY: blog-category&lt;/span&gt;
#+AUTHOR: My Name
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+LANGUAGE: en&lt;/span&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+SUMMARY: hello, this is the description&lt;/span&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+SLUG: test_slug&lt;/span&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+MODIFIED: [2015-12-29 Di]&lt;/span&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;#+TAGS: my, first, tags&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6b9a372" class="outline-4"&gt;
&lt;h4 id="org6b9a372"&gt;&lt;span class="section-number-4"&gt;2.1.3&lt;/span&gt; Conclusion and other thoughts&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-1-3"&gt;
&lt;p&gt;
Using Pelican and org mode is pretty nice once its set up. Although I did run into some troubles initially, and I was able to fairly easily fix the issues I was having. I even submitted my first issues and PR's to an open source project that wasn't my own or a friends!
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/pull/1066"&gt;Fix the processing of org files with SRC blocks.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/pull/1064"&gt;Fix loading of org&lt;sub&gt;reader&lt;/sub&gt; plugins.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I am using the &lt;code&gt;org_reader&lt;/code&gt; plugin right now, but I'm not sure if I'll stick with it, the abilties that &lt;code&gt;pandoc&lt;/code&gt; have look pretty nice too.
&lt;/p&gt;

&lt;p&gt;
In my testing of different static site generators, I tried &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt;, written in go, along with the &lt;a href="https://ox-hugo.scripter.co/"&gt;ox-hugo&lt;/a&gt; package for Emacs. I really liked it as &lt;code&gt;ox-hugo&lt;/code&gt; gives you the ability to have several posts/pages/etc in a single org file. I would ultimately like to set something like that up for Pelican, but that's a task for a later day.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="pelican"></category><category term="tutorial"></category><category term="orgmode"></category></entry></feed>